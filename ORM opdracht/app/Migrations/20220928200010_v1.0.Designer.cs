// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using admin;

#nullable disable

namespace admin.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220928200010_v1.0")]
    partial class v10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("admin.Attractie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Attractie");
                });

            modelBuilder.Entity("admin.DateTimeBereik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Eind")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("DateTimeBereik");
                });

            modelBuilder.Entity("admin.Gast", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<DateTime>("EersteBezoek")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FavoriteAttractieID")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<int>("GebruikerId")
                        .HasColumnType("int");

                    b.Property<bool>("isBegeleider")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("FavoriteAttractieID");

                    b.ToTable("Gasten");
                });

            modelBuilder.Entity("admin.GastInfo", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("LaatsteBezochteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GastInfo");
                });

            modelBuilder.Entity("admin.Medewerker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GebruikerId")
                        .HasColumnType("int");

                    b.Property<int?>("reserveringID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("reserveringID");

                    b.ToTable("Mederwerkers");
                });

            modelBuilder.Entity("admin.OnderHoud", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Probleem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("attractieOmTeOnderhoudenID")
                        .HasColumnType("int");

                    b.Property<int>("datumonderhoudID")
                        .HasColumnType("int");

                    b.Property<int>("medewerkerCoordinatorID")
                        .HasColumnType("int");

                    b.Property<int>("medewerkerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("attractieOmTeOnderhoudenID");

                    b.HasIndex("datumonderhoudID");

                    b.HasIndex("medewerkerCoordinatorID");

                    b.HasIndex("medewerkerID");

                    b.ToTable("Onderhoud");
                });

            modelBuilder.Entity("admin.Reservering", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("datumReserveeringID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("datumReserveeringID");

                    b.ToTable("Reservering");
                });

            modelBuilder.Entity("admin.Gast", b =>
                {
                    b.HasOne("admin.Attractie", "FavoriteAttractie")
                        .WithMany()
                        .HasForeignKey("FavoriteAttractieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavoriteAttractie");
                });

            modelBuilder.Entity("admin.GastInfo", b =>
                {
                    b.HasOne("admin.Gast", "gast")
                        .WithOne("info")
                        .HasForeignKey("admin.GastInfo", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("gast");
                });

            modelBuilder.Entity("admin.Medewerker", b =>
                {
                    b.HasOne("admin.Reservering", "reservering")
                        .WithMany()
                        .HasForeignKey("reserveringID");

                    b.Navigation("reservering");
                });

            modelBuilder.Entity("admin.OnderHoud", b =>
                {
                    b.HasOne("admin.Attractie", "attractieOmTeOnderhouden")
                        .WithMany()
                        .HasForeignKey("attractieOmTeOnderhoudenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin.DateTimeBereik", "datumonderhoud")
                        .WithMany()
                        .HasForeignKey("datumonderhoudID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin.Medewerker", "medewerkerCoordinator")
                        .WithMany()
                        .HasForeignKey("medewerkerCoordinatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin.Medewerker", "medewerker")
                        .WithMany()
                        .HasForeignKey("medewerkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("attractieOmTeOnderhouden");

                    b.Navigation("datumonderhoud");

                    b.Navigation("medewerker");

                    b.Navigation("medewerkerCoordinator");
                });

            modelBuilder.Entity("admin.Reservering", b =>
                {
                    b.HasOne("admin.Gast", "gast")
                        .WithOne("reservering")
                        .HasForeignKey("admin.Reservering", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin.DateTimeBereik", "datumReserveering")
                        .WithMany()
                        .HasForeignKey("datumReserveeringID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("datumReserveering");

                    b.Navigation("gast");
                });

            modelBuilder.Entity("admin.Gast", b =>
                {
                    b.Navigation("info")
                        .IsRequired();

                    b.Navigation("reservering");
                });
#pragma warning restore 612, 618
        }
    }
}
