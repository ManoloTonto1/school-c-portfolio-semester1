// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using admin;

#nullable disable

namespace admin.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221003233924_test1")]
    partial class test1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("admin.Attractie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attractie");
                });

            modelBuilder.Entity("admin.DateTimeBereik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Eind")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DateTimeBereik");
                });

            modelBuilder.Entity("admin.Gast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<DateTime>("EersteBezoek")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<int>("attractieId")
                        .HasColumnType("int");

                    b.Property<int>("gastInfoId")
                        .HasColumnType("int");

                    b.Property<bool>("isBegeleider")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("attractieId");

                    b.HasIndex("gastInfoId")
                        .IsUnique();

                    b.ToTable("Gasten");
                });

            modelBuilder.Entity("admin.GastInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LaatsteBezochteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gastId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GastInfo");
                });

            modelBuilder.Entity("admin.Medewerker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medewerkers");
                });

            modelBuilder.Entity("admin.OnderHoud", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Probleem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("attractieId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("attractieId");

                    b.ToTable("OnderHoud");
                });

            modelBuilder.Entity("admin.Reservering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("attractieId")
                        .HasColumnType("int");

                    b.Property<int>("datumReserveeringId")
                        .HasColumnType("int");

                    b.Property<int>("gastId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("attractieId");

                    b.HasIndex("datumReserveeringId");

                    b.HasIndex("gastId");

                    b.ToTable("Reservering");
                });

            modelBuilder.Entity("MedewerkerOnderHoud", b =>
                {
                    b.Property<int>("coordinatorenId")
                        .HasColumnType("int");

                    b.Property<int>("onderhoudenTeCoordinerenID")
                        .HasColumnType("int");

                    b.HasKey("coordinatorenId", "onderhoudenTeCoordinerenID");

                    b.HasIndex("onderhoudenTeCoordinerenID");

                    b.ToTable("MedewerkerOnderHoud");
                });

            modelBuilder.Entity("MedewerkerOnderHoud1", b =>
                {
                    b.Property<int>("medewerkersId")
                        .HasColumnType("int");

                    b.Property<int>("onderhoudenTeDoenID")
                        .HasColumnType("int");

                    b.HasKey("medewerkersId", "onderhoudenTeDoenID");

                    b.HasIndex("onderhoudenTeDoenID");

                    b.ToTable("MedewerkerOnderHoud1");
                });

            modelBuilder.Entity("admin.Gast", b =>
                {
                    b.HasOne("admin.Attractie", "FavoriteAttractie")
                        .WithMany("gastenFav")
                        .HasForeignKey("attractieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin.GastInfo", "info")
                        .WithOne("gast")
                        .HasForeignKey("admin.Gast", "gastInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavoriteAttractie");

                    b.Navigation("info");
                });

            modelBuilder.Entity("admin.GastInfo", b =>
                {
                    b.OwnsOne("admin.Coordinate", "coordinate", b1 =>
                        {
                            b1.Property<int>("GastInfoId")
                                .HasColumnType("int");

                            b1.Property<int>("X")
                                .HasColumnType("int");

                            b1.Property<int>("Y")
                                .HasColumnType("int");

                            b1.HasKey("GastInfoId");

                            b1.ToTable("GastInfo");

                            b1.WithOwner()
                                .HasForeignKey("GastInfoId");
                        });

                    b.Navigation("coordinate");
                });

            modelBuilder.Entity("admin.OnderHoud", b =>
                {
                    b.HasOne("admin.Attractie", "attractieOmTeOnderhouden")
                        .WithMany()
                        .HasForeignKey("attractieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("attractieOmTeOnderhouden");
                });

            modelBuilder.Entity("admin.Reservering", b =>
                {
                    b.HasOne("admin.Attractie", "attracties")
                        .WithMany()
                        .HasForeignKey("attractieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin.DateTimeBereik", "datumReserveering")
                        .WithMany()
                        .HasForeignKey("datumReserveeringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin.Gast", "gast")
                        .WithMany("reserveringen")
                        .HasForeignKey("gastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("attracties");

                    b.Navigation("datumReserveering");

                    b.Navigation("gast");
                });

            modelBuilder.Entity("MedewerkerOnderHoud", b =>
                {
                    b.HasOne("admin.Medewerker", null)
                        .WithMany()
                        .HasForeignKey("coordinatorenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin.OnderHoud", null)
                        .WithMany()
                        .HasForeignKey("onderhoudenTeCoordinerenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedewerkerOnderHoud1", b =>
                {
                    b.HasOne("admin.Medewerker", null)
                        .WithMany()
                        .HasForeignKey("medewerkersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("admin.OnderHoud", null)
                        .WithMany()
                        .HasForeignKey("onderhoudenTeDoenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("admin.Attractie", b =>
                {
                    b.Navigation("gastenFav");
                });

            modelBuilder.Entity("admin.Gast", b =>
                {
                    b.Navigation("reserveringen");
                });

            modelBuilder.Entity("admin.GastInfo", b =>
                {
                    b.Navigation("gast")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
